{"a_to_int_column": "# generic lambda function\n# set column values to upper case \n\nint(col_val)\n\n", "add_normalized_column": "# dfcleanser generic function\n# add a new normalized  column to the dataframe\n\nfrom dfcleanser.common.cfg import get_dc_dataframe\ndf = get_dc_dataframe()\nfrom dfcleanser.common.cfg import get_current_col_name\ncolname = get_current_col_name() \n\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler() \nscaled_values = scaler.fit_transform(df[colname])\n\nfrom dfcleanser.data_transform.data_transform_columns_control import process_add_column\nparms = [17,[colname+\"_normalized\"]]\nprocess_add_column(parms)", "upperCase_column": "# generic lambda function\n# set column values to upper case \n\ncol_val.upper()\n\n", "to_string_column": "# generic lambda function\n# set column values to upper case \n\nstr(col_val)\n\n", "normalize_column": "# dfcleanser generic function\n# normalize a column in place\n\nfrom dfcleanser.common.cfg import get_dc_dataframe\ndf = get_dc_dataframe()\nfrom dfcleanser.common.cfg import get_current_col_name\ncolname = get_current_col_name() \n\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler() \nscaled_values = scaler.fit_transform(df[colname])\ndf[colname] = scaled_values", "a_to_long_column": "# generic lambda function\n# set column values to upper case \n\nlong(col_val)\n\n"}